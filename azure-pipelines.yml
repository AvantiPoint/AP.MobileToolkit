trigger:
- master

name: 3.0.0.$(Build.BuildId)

variables:
- name: BuildPlatform
  value: 'Any CPU'
- name: BuildConfiguration
  value: 'Release'
- group: CodeSigning

stages:
- stage: Build
  jobs:
  - job: Build
    displayName: Build Toolkit
    pool:
      vmImage: windows-latest
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: NuGetToolInstaller@1
      displayName: Use Latest NuGet
      inputs:
        checkLatest: true

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        feedsToUse: config
        nugetConfigPath: build/NuGet.config

    - task: MSBuild@1
      displayName: 'Build solution AP.MobileToolkit.sln'
      inputs:
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        msbuildArguments: '/p:DebugType=portable /p:JavaSdkDirectory="$(JAVA_HOME)"'

    - task: DotNetCoreCLI@2
      displayName: Run Tests
      inputs:
        command: test
        projects: 'tests/**/*.csproj'
        arguments: '-c $(BuildConfiguration) --collect:"Code Coverage" -s $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings --no-build'

    # Temporarily disable until code sign cert is updated.
    # - task: PowerShell@2
    #   displayName: 'Authenticode Sign Artifacts'
    #   inputs:
    #     filePath: 'build\Sign-Packages.ps1'
    #   env:
    #     SignClientUser: $(SignClientUser)
    #     SignClientSecret: $(SignClientSecret)
    #     SignClientClientId: $(SignClientClientId)
    #     SignClientTenantId: $(SignClientTenantId)
    #     SignServiceResourceId: $(SignServiceResourceId)
    #   condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Package Artifacts'
      inputs:
        artifact: NuGet
        targetPath: $(Build.ArtifactStagingDirectory)

- stage: Deploy
  displayName: Deploy NuGet Packages
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['system.pullrequest.isfork'], false))
  jobs:
  - deployment: SponsorConnect
    displayName: SponsorConnect.dev
    environment: SponsorConnect
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
                command: push
                packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg'
                nuGetFeedType: external
                publishFeedCredentials: 'SponsorConnect'
- stage: DeployRelease
  displayName: Deploy Release NuGet Packages
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['system.pullrequest.isfork'], false), or(eq(variables['IS_PREVIEW'], true), eq(variables['IS_RELEASE'], true)))
  jobs:
  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    strategy:
      runOnce:
        deploy:
          steps:
            - checkout: self
              clean: true

            - task: PowerShell@2
              displayName: Process Release
              inputs:
                targetType: filePath
                filePath: $(System.DefaultWorkingDirectory)/build/Process-Release.ps1

            - task: GitHubRelease@1
              inputs:
                action: create
                gitHubConnection: GitHub
                assets: |
                  $(Pipeline.Workspace)/**/*.nupkg
                  $(Pipeline.Workspace)/**/*.snupkg
                tag: 'v$(VersionName)'
                tagSource: userSpecifiedTag
                isPreRelease: $(IS_PREVIEW)
                title: $(ReleaseDisplayName)
                addChangeLog: true

            - task: NuGetCommand@2
              displayName: NuGet Push
              inputs:
                command: push
                packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg'
                nuGetFeedType: external
                publishFeedCredentials: 'NuGet.org'