trigger:
- master

name: 3.0.0.$(Build.BuildId)

variables:
- name: BuildPlatform
  value: 'Any CPU'
- name: BuildConfiguration
  value: 'Release'
- group: CodeSigning

stages:
- stage: Build
  jobs:
  - job: Build
    displayName: Build Toolkit
    pool:
      vmImage: windows-2019
    steps:
    - task: DotNetCoreInstaller@0
      inputs:
        version: '3.0.100-preview7-012821'

    - task: NuGetToolInstaller@0
      displayName: Use NuGet 4.9.4
      inputs:
        versionSpec: 4.9.4

    # - task: NuGetCommand@2
    #   displayName: 'NuGet restore'
    #   inputs:
    #     feedsToUse: config
    #     nugetConfigPath: build/NuGet.config

    - task: MSBuild@1
      displayName: 'Build solution AP.MobileToolkit.sln'
      inputs:
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'
        msbuildArguments: '/p:DebugType=portable /p:JavaSdkDirectory="$(JAVA_HOME)" /restore'

    - task: DotNetCoreCLI@2
      displayName: Run Tests
      inputs:
        command: test
        projects: 'tests/**/*.csproj'
        arguments: '-c $(BuildConfiguration) --collect:"Code Coverage" -s $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings --no-build'

    # Temporarily disable until code sign cert is updated.
    # - task: PowerShell@2
    #   displayName: 'Authenticode Sign Artifacts'
    #   inputs:
    #     filePath: 'build\Sign-Packages.ps1'
    #   env:
    #     SignClientUser: $(SignClientUser)
    #     SignClientSecret: $(SignClientSecret)
    #     SignClientClientId: $(SignClientClientId)
    #     SignClientTenantId: $(SignClientTenantId)
    #     SignServiceResourceId: $(SignServiceResourceId)
    #   condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Package Artifacts'
      inputs:
        artifactName: NuGet
        targetPath: $(Build.ArtifactStagingDirectory)

- stage: Deploy
  displayName: Deploy NuGet Packages
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['system.pullrequest.isfork'], false))
  jobs:
  - job: ProcessDeployment
    pool:
      vmImage: windows-2019
    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'NuGet'
        downloadPath: $(Pipeline.Workspace)
    - powershell: $(System.DefaultWorkingDirectory)/build/Process-Release.ps1
      workingDirectory: $(Pipeline.Workspace)
      displayName: Process Artifacts for Release
  - deployment: MyGet
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
                command: push
                packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
                nuGetFeedType: external
                publishFeedCredentials: 'AvaintPoint-MyGet'
  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    condition: and(succeeded(), or(eq(variables['IS_PREVIEW'], true), eq(variables['IS_RELEASE'], true)))
    strategy:
      runOnce:
        deploy:
          steps:
          - powershell: |
             try {
                 $artifactDirectory = $env:PIPELINE_WORKSPACE
                 Write-Host "Currect working directory $artifactDirectory"
                 $nupkg = Get-ChildItem -Path $artifactDirectory -Filter *.nupkg -Recurse | Select-Object -First 1

                 if($null -eq $nupkg) {
                     Throw "No NuGet Package could be found in the current directory"
                 }

                 Write-Host "Package Name $($nupkg.Name)"
                 $nupkg.Name -match '^(.*?)\.((?:\.?[0-9]+){3,}(?:[-a-z]+)?)\.nupkg$'

                 $VersionName = $Matches[2]
                 $IsPreview = $VersionName -match '-pre$'
                 $ReleaseDisplayName = $VersionName

                 if($null -eq $env:IS_PREVIEW) {
                     Write-Output ("##vso[task.setvariable variable=IS_PREVIEW;]$IsPreview")
                 }

                 if($true -eq $IsPreview) {
                     $ReleaseDisplayName = "$VersionName - Preview"
                 }

                 Write-Host "Version Name" $VersionName
                 Write-Host "Release Display Name $ReleaseDisplayName"
                 Write-Output ("##vso[task.setvariable variable=VersionName;]$VersionName")
                 Write-Output ("##vso[task.setvariable variable=ReleaseDisplayName;]$ReleaseDisplayName")
             }
             catch {
                 Write-Error  $_
                 exit 1
             }
            name: processName
            displayName: Process Artifacts for Release

          - task: GithubRelease@0 
            displayName: 'Create GitHub Release'
            inputs:
              githubConnection: 'GitHub'
              title: '$(ReleaseDisplayName)'
              tag: 'v$(VersionName)'
              isPreRelease: $(IS_PREVIEW)
              assets: '$(Pipeline.Workspace)/**/*.nupkg'
              addChangeLog: true
              isDraft: true

          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet'