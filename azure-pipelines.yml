trigger:
- master

name: 3.0.0.$(Build.BuildId)

variables:
- name: BuildPlatform
  value: 'Any CPU'
- name: BuildConfiguration
  value: 'Release'
- group: CodeSigning

stages:
- stage: Build
  jobs:
  - job: Build
    displayName: Build Toolkit
    pool:
      vmImage: windows-2019
    steps:
    - task: NuGetToolInstaller@0
      displayName: Use NuGet 4.9.4
      inputs:
        versionSpec: 4.9.4

    - task: NuGetCommand@2
      displayName: 'NuGet restore'
      inputs:
        feedsToUse: config
        nugetConfigPath: build/NuGet.config

    - task: MSBuild@1
      displayName: 'Build solution AP.MobileToolkit.sln'
      inputs:
        platform: '$(BuildPlatform)'
        configuration: '$(BuildConfiguration)'

    - task: DotNetCoreCLI@2
      displayName: Run Tests
      inputs:
        command: test
        projects: 'tests/**/*.csproj'
        arguments: '-c $(BuildConfiguration) --collect:"Code Coverage" -s $(System.DefaultWorkingDirectory)/CodeCoverage.runsettings --no-build'

    - task: PowerShell@2
      displayName: 'Authenticode Sign Artifacts'
      inputs:
        filePath: 'build\Sign-Packages.ps1'
      env:
        SignClientUser: $(SignClientUser)
        SignClientSecret: $(SignClientSecret)
        SignClientClientId: $(SignClientClientId)
        SignClientTenantId: $(SignClientTenantId)
        SignServiceResourceId: $(SignServiceResourceId)
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))

    - task: PublishPipelineArtifact@0
      displayName: 'Publish Package Artifacts'
      inputs:
        artifactName: NuGet
        targetPath: $(Build.ArtifactStagingDirectory)

- stage: Deploy
  displayName: Deploy NuGet Packages
  condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
  jobs:
  - job: ProcessDeployment
    pool:
      vmImage: windows-2019
    steps:
    - task: DownloadPipelineArtifact@1
      inputs:
        artifactName: 'NuGet'
        downloadPath: $(Pipeline.Workspace)
    - powershell: $(System.DefaultWorkingDirectory)/build/Process-Release.ps1
      workingDirectory: $(Pipeline.Workspace)
      displayName: Process Artifacts for Release
  - deployment: MyGet
    displayName: MyGet.org
    environment: MyGet
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: 'NuGet push'
            inputs:
                command: push
                packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
                nuGetFeedType: external
                publishFeedCredentials: 'DanSiegel-MyGet'
  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    dependsOn: ProcessDeployment
    condition: and(succeeded(), eq(variables['DeployToNuGet'], 'true'))
    strategy:
      runOnce:
        deploy:
          steps:
          - task: jakobehn.jakobehn-vsts-github-tasks.publish-github-release.PublishGitHubRelease@0
            displayName: 'Publish GitHub Release'
            inputs:
              applicationName: AzureDevOps
              token: '$(GitHubToken)'
              repo: Prism.Container.Extensions
              owner: dansiegel
              tagName: 'v$(VersionName)'
              releaseName: '$(ReleaseDisplayName)'
              prerelease: $(IsPreview)
              assetsPattern: '$(Pipeline.Workspace)/**/*.nupkg'
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;!$(Pipeline.Workspace)/**/*.symbols.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet'